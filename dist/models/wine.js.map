{"version":3,"file":"Wine.js","sourceRoot":"","sources":["../../src/models/Wine.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAA+C;AAC/C,8BAA2B;AAE3B,IAAI,eAAe,GAA6B,IAAI,CAAC;AAYrD,MAAqB,IAAI;IACrB,mCAAmC;IACnC,MAAM,CAAO,UAAU;;YACnB,IAAI,CAAC,eAAe,EAAE,CAAC;gBACnB,eAAe,GAAG,OAAE,CAAC,UAAU,CAAQ,OAAO,CAAC,CAAC;gBAChD,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;YAChD,CAAC;QACL,CAAC;KAAA;IAED,kDAAkD;IAC1C,MAAM,CAAO,iBAAiB;;YAClC,IAAI,CAAC,eAAe,EAAE,CAAC;gBACnB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YAC5B,CAAC;QACL,CAAC;KAAA;IAED,yDAAyD;IACjD,MAAM,KAAK,UAAU;QACzB,IAAI,CAAC,eAAe,EAAE,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;QACjE,CAAC;QACD,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,MAAM,CAAO,IAAI;;YACb,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/B,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAClD,CAAC;KAAA;IAED,MAAM,CAAO,QAAQ,CAAC,EAAU;;YAC5B,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/B,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,kBAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACpE,CAAC;KAAA;IAED,MAAM,CAAO,OAAO,CAAC,KAAuB;;YACxC,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/B,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QAC/D,CAAC;KAAA;IAED,MAAM,CAAO,IAAI,CAAC,IAAW;;YACzB,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACrD,uCAAY,IAAI,KAAE,GAAG,EAAE,MAAM,CAAC,UAAU,IAAG;QAC/C,CAAC;KAAA;IAED,MAAM,CAAO,MAAM,CAAC,EAAU,EAAE,OAAuB;;YACnD,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAC1C,EAAE,GAAG,EAAE,IAAI,kBAAQ,CAAC,EAAE,CAAC,EAAE,EACzB,EAAE,IAAI,EAAE,OAAO,EAAE,CACpB,CAAC;YACF,IAAI,MAAM,CAAC,YAAY,KAAK,CAAC,EAAE,CAAC;gBAC5B,OAAO,IAAI,CAAC,CAAC,iBAAiB;YAClC,CAAC;YACD,OAAO,gCAAK,OAAO,KAAE,GAAG,EAAE,IAAI,kBAAQ,CAAC,EAAE,CAAC,GAAW,CAAC;QAC1D,CAAC;KAAA;IAED,MAAM,CAAO,aAAa;;YACtB,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/B,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACpE,CAAC;KAAA;CACJ;AA7DD,uBA6DC","sourcesContent":["import { ObjectId, Collection } from 'mongodb';\nimport { db } from \"../db\";\n\nlet winesCollection: Collection<IWine> | null = null;\n\nexport interface IWine {\n    _id?: ObjectId;\n    name: string;\n    rating: number;\n    comments: string;\n    type: string;\n    favorite?: boolean;\n    image?: Buffer;\n}\n\nexport default class Wine {\n    // Initialize wines collection once\n    static async initialize() {\n        if (!winesCollection) {\n            winesCollection = db.collection<IWine>('wines');\n            console.log(\"Wines collection initialized\");\n        }\n    }\n\n    // Ensure the collection is initialized before use\n    private static async ensureInitialized() {\n        if (!winesCollection) {\n            await this.initialize();\n        }\n    }\n\n    // Getter to ensure winesCollection is always initialized\n    private static get collection(): Collection<IWine> {\n        if (!winesCollection) {\n            throw new Error(\"Wine collection has not been initialized!\");\n        }\n        return winesCollection;\n    }\n\n    static async find(): Promise<IWine[]> {\n        await this.ensureInitialized();\n        return await this.collection.find().toArray();\n    }\n\n    static async findById(id: string): Promise<IWine | null> {\n        await this.ensureInitialized();\n        return await this.collection.findOne({ _id: new ObjectId(id) });\n    }\n\n    static async findOne(query: { name: string }): Promise<IWine | null> {\n        await this.ensureInitialized();\n        return await this.collection.findOne({ name: query.name });\n    }\n\n    static async save(wine: IWine): Promise<IWine> {\n        await this.ensureInitialized();\n        const result = await this.collection.insertOne(wine);\n        return { ...wine, _id: result.insertedId };\n    }\n\n    static async update(id: string, updates: Partial<IWine>): Promise<IWine | null> {\n        await this.ensureInitialized();\n        const result = await this.collection.updateOne(\n            { _id: new ObjectId(id) },\n            { $set: updates }\n        );\n        if (result.matchedCount === 0) {\n            return null; // Wine not found\n        }\n        return { ...updates, _id: new ObjectId(id) } as IWine;\n    }\n\n    static async findFavorites(): Promise<IWine[]> {\n        await this.ensureInitialized();\n        return await this.collection.find({ favorite: true }).toArray();\n    }\n}"]}