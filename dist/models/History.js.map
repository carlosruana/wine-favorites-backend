{"version":3,"file":"History.js","sourceRoot":"","sources":["../../src/models/History.ts"],"names":[],"mappings":"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","sourcesContent":["import { ObjectId, WithId, Collection, Db } from \"mongodb\";\nimport { db } from \"../db\";\n\nexport interface IHistory {\n    _id?: ObjectId;\n    wineName: string;\n    uploadDate?: string;\n    image?: Buffer;\n}\n\nexport default class History {\n    private static _historyCollection: Collection<IHistory> | null = null;\n\n    // Initialize the history collection once\n    static async initialize() {\n        if (!this._historyCollection) {\n            this._historyCollection = db.collection<IHistory>(\"history\");\n        }\n    }\n\n    // Ensure the collection is initialized before use\n    private static async ensureInitialized() {\n        if (!this._historyCollection) {\n            await this.initialize();\n        }\n    }\n\n    // Getter to ensure historyCollection is initialized\n    private static get collection(): Collection<IHistory> {\n        if (!this._historyCollection) {\n            throw new Error(\"History collection has not been initialized!\");\n        }\n        return this._historyCollection;\n    }\n\n    // Get all history entries\n    static async find(): Promise<IHistory[]> {\n        await this.ensureInitialized();\n        const result: WithId<IHistory>[] = await this.collection\n            .find({}, { projection: { _id: 1, wineName: 1, uploadDate: 1, image: 1 } }) // Selecting necessary fields\n            .sort({ uploadDate: -1 })\n            .toArray();\n        \n        return result.map(history => ({\n            _id: history._id, // Keep _id as ObjectId\n            wineName: history.wineName,\n            uploadDate: history.uploadDate,\n            image: history.image,\n        }));\n    }\n\n    // Get a history entry by ID\n    static async findById(id: string): Promise<IHistory | null> {\n        await this.ensureInitialized();\n        const result: WithId<IHistory> | null = await this.collection.findOne(\n            { _id: new ObjectId(id) },\n            { projection: { _id: 1, wineName: 1, uploadDate: 1, image: 1 } }\n        );\n        if (!result) return null;\n        return {\n            _id: result._id,\n            wineName: result.wineName,\n            uploadDate: result.uploadDate,\n            image: result.image,\n        };\n    }\n\n    // Save a new history entry\n    static async save(entry: IHistory): Promise<IHistory> {\n        await this.ensureInitialized();\n        entry.uploadDate = new Date().toISOString();\n        const insertResult = await this.collection.insertOne({\n            ...entry,\n            _id: entry._id ? new ObjectId(entry._id) : new ObjectId(),\n        });\n        return { ...entry, _id: insertResult.insertedId };\n    }\n\n    // Delete a history entry by ID\n    static async deleteById(id: string): Promise<void> {\n        await this.ensureInitialized();\n        await this.collection.deleteOne({ _id: new ObjectId(id) });\n    }\n}"]}